AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'LearnIA User Management Lambda'

# ================================================
# PARÁMETROS
# ================================================
Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name
  
  DatabaseUrl:
    Type: String
    Description: PostgreSQL connection string
    NoEcho: true
  
  JWTSecret:
    Type: String
    Description: JWT Secret Key
    NoEcho: true

# ================================================
# GLOBALS
# ================================================
Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: nodejs18.x
    Environment:
      Variables:
        NODE_ENV: !Ref Environment
    # CRÍTICO: Configuración VPC para acceder a RDS privado
    VpcConfig:
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
      SubnetIds:
        - subnet-023d3df187fd22a42  # Tu subnet de RDS (de la captura)
        - subnet-0d60e563211f83fdf   # Tu subnet de RDS
        - subnet-0fc83b3734ce45fbf   # Tu subnet de RDS

# ================================================
# RECURSOS
# ================================================
Resources:

  # Security Group para Lambda (acceso a RDS)
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'learnia-lambda-sg-${Environment}'
      GroupDescription: 'Security group for User Management Lambda'
      VpcId: vpc-0f6c0bb7629fb4c05  # Tu VPC (de la captura)
      SecurityGroupEgress:
        # Permitir conexiones PostgreSQL salientes
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 10.0.0.0/16  # Rango IP de tu VPC
        # Permitir HTTPS salientes (para otros servicios AWS)
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # Lambda Function
  UserManagementFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'learnia-user-management-${Environment}'
      CodeUri: src/
      Handler: app.lambdaHandler
      Description: 'User Management MVP'
      
      # Políticas adicionales para VPC
      Policies:
        - VPCAccessPolicy: {}
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'
      
      Environment:
        Variables:
          DATABASE_URL: !Ref DatabaseUrl
          JWT_SECRET: !Ref JWTSecret
          JWT_EXPIRES_IN: "24h"
          BCRYPT_ROUNDS: "12"
          CORS_ORIGIN: "*"
      
      Events:
        # Auth endpoints
        Register:
          Type: Api
          Properties:
            RestApiId: !Ref UserManagementApi
            Path: /auth/register
            Method: POST
        
        Login:
          Type: Api
          Properties:
            RestApiId: !Ref UserManagementApi
            Path: /auth/login
            Method: POST
        
        Logout:
          Type: Api
          Properties:
            RestApiId: !Ref UserManagementApi
            Path: /auth/logout
            Method: POST
        
        # User endpoints
        GetProfile:
          Type: Api
          Properties:
            RestApiId: !Ref UserManagementApi
            Path: /users/{id}
            Method: GET
        
        UpdateProfile:
          Type: Api
          Properties:
            RestApiId: !Ref UserManagementApi
            Path: /users/{id}/profile
            Method: PUT
        
        Dashboard:
          Type: Api
          Properties:
            RestApiId: !Ref UserManagementApi
            Path: /users/{id}/dashboard
            Method: GET
        
        # Health check
        Health:
          Type: Api
          Properties:
            RestApiId: !Ref UserManagementApi
            Path: /health
            Method: GET

  # API Gateway
  UserManagementApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub 'learnia-user-mgmt-api-${Environment}'
      StageName: !Ref Environment
      
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"

# ================================================
# OUTPUTS
# ================================================
Outputs:
  ApiUrl:
    Description: 'API Gateway URL'
    Value: !Sub 'https://${UserManagementApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'
  
  FunctionArn:
    Description: 'Lambda Function ARN'
    Value: !GetAtt UserManagementFunction.Arn
  
  LambdaSecurityGroupId:
    Description: 'Lambda Security Group ID'
    Value: !Ref LambdaSecurityGroup